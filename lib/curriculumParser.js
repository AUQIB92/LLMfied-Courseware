// Curriculum Parser Utility
// Parses curriculum Markdown outline into a structured JS object

/**
 * Parses a curriculum Markdown string into a structured object.
 * Supports format generated by /api/courses/generate-curriculum.
 *
 * @param {string} curriculum - The curriculum Markdown string
 * @returns {object} Parsed curriculum { overview, modules }
 */
export function parseCurriculumOutline(curriculum) {
  if (!curriculum || typeof curriculum !== 'string') return { overview: {}, modules: [] };

  // Extract Course Overview
  const overviewMatch = curriculum.match(/## Course Overview[\s\S]*?(?=(## Module 1:|### Module 1:|$))/i);
  let overview = { description: '', objectives: [], prerequisites: [] };
  if (overviewMatch) {
    const overviewText = overviewMatch[0];
    // Description: first paragraph
    const descMatch = overviewText.match(/## Course Overview\s*([^-\n]+)\n/i);
    overview.description = descMatch ? descMatch[1].trim() : '';
    // Objectives
    const objMatch = overviewText.match(/objectives?\s*[:-]?\s*([\s\S]*?)(?=(prerequisites|$))/i);
    if (objMatch) {
      overview.objectives = objMatch[1]
        .split(/\n|-/)
        .map(s => s.trim())
        .filter(s => s.length > 0 && !/^objectives?/i.test(s));
    }
    // Prerequisites
    const preqMatch = overviewText.match(/prerequisites?\s*[:-]?\s*([\s\S]*)/i);
    if (preqMatch) {
      overview.prerequisites = preqMatch[1]
        .split(/\n|-/)
        .map(s => s.trim())
        .filter(s => s.length > 0 && !/^prerequisites?/i.test(s));
    }
  }

  // Extract Modules
  const moduleRegex = /(##+ Module (\d+): ([^\n]+)[\s\S]*?)(?=(##+ Module \d+:|$))/gi;
  let modules = [];
  let match;
  while ((match = moduleRegex.exec(curriculum)) !== null) {
    const moduleBlock = match[1];
    const number = parseInt(match[2], 10);
    const title = match[3].trim();
    // Objective
    const objMatch = moduleBlock.match(/\*\*Objective:?\*\*\s*([^\n]+)/i);
    const objective = objMatch ? objMatch[1].trim() : '';
    // Key Concepts
    const keyConceptsMatch = moduleBlock.match(/\*\*Key Concepts:?\*\*[\s\S]*?(?:\n- ([^\n]+))+?/gi);
    let keyConcepts = [];
    if (keyConceptsMatch) {
      // Find all lines starting with -
      const lines = moduleBlock.split('\n');
      let inConcepts = false;
      for (let line of lines) {
        if (/\*\*Key Concepts:?\*\*/i.test(line)) {
          inConcepts = true;
          continue;
        }
        if (inConcepts) {
          if (/^\s*-\s*(.+)/.test(line)) {
            keyConcepts.push(line.replace(/^\s*-\s*/, '').trim());
          } else if (/^\s*\*\*/.test(line) || /^##+ /.test(line)) {
            break;
          }
        }
      }
    }
    modules.push({ number, title, objective, keyConcepts });
  }

  return { overview, modules };
} 